package it.uniroma1.di.simulejos;

import java.awt.Frame;
import java.io.File;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;

public final class Simulation implements Serializable {
	private static final long serialVersionUID = -290517947218502549L;

	private final List<Robot> robots = new LinkedList<>();

	private transient volatile Frame parentWindow;
	private transient volatile PrintWriter logWriter;
	private transient volatile boolean dirty = false;

	public Simulation(Frame parentWindow, Writer logWriter) {
		this.parentWindow = parentWindow;
		this.logWriter = new PrintWriter(new PartialWriter("Simulation",
				logWriter));
	}

	public boolean isDirty() {
		return dirty;
	}

	public void clearDirty() {
		dirty = false;
	}

	public void addRobot(File classPath, String mainClassName, String script) {
		dirty = true;
		robots.add(new Robot(classPath, mainClassName, script, parentWindow,
				logWriter));
	}

	interface State {
		abstract State play();

		abstract State suspend();

		abstract State stop();
	};

	private State runningState = new State() {
		@Override
		State play() {
			return this;
		}

		@Override
		State suspend() {
			for (Robot robot : robots) {
				robot.suspend();
			}
			logWriter.println("suspended");
			return SUSPENDED;
		}

		@Override
		State stop() {
			// TODO Auto-generated method stub
			return null;
		}
	};

	private State suspendedState = new State() {
		@Override
		State play() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		State suspend() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		State stop() {
			// TODO Auto-generated method stub
			return null;
		}
	};

	private State stoppedState = new State() {
		@Override
		State play() {
			logWriter.println("started");
			for (Robot robot : robots) {
				robot.play();
			}
			return RUNNING;
		}

		@Override
		State suspend() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		State stop() {
			// TODO Auto-generated method stub
			return null;
		}
	};

	private State state = State.RUNNING;

	public void play() {
		state = state.play();
	}

	public void suspend() {
		// TODO
	}

	public void resume() {
		logWriter.println("resumed");
		for (Robot robot : robots) {
			robot.resume();
		}
	}

	public void stop() {
		for (Robot robot : robots) {
			robot.stop();
		}
		logWriter.println("stopped");
	}
}
